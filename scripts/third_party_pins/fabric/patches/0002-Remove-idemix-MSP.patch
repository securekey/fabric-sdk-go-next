From 983b05aed49467d0d9ad17266eecc7c599dfcfa7 Mon Sep 17 00:00:00 2001
From: Aleksandar Likic <aleksandar.likic@securekey.com>
Date: Wed, 15 May 2019 05:58:34 -0400
Subject: [PATCH 1/1] Remove idemix MSP

Change-Id: I56cc1d6146ab4946dea4a79f1f16c1342f3f0c9f
Signed-off-by: Aleksandar Likic <aleksandar.likic@securekey.com>

Copyright SecureKey Technologies Inc. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0

---
 common/channelconfig/msp.go |  8 -------
 msp/configbuilder.go        | 48 -------------------------------------
 msp/factory.go              | 16 +------------
 msp/mspmgrimpl.go           |  2 --
 4 files changed, 1 insertion(+), 73 deletions(-)

diff --git a/common/channelconfig/msp.go b/common/channelconfig/msp.go
index d9240f684..f25db76a2 100644
--- a/common/channelconfig/msp.go
+++ b/common/channelconfig/msp.go
@@ -52,14 +52,6 @@ func (bh *MSPConfigHandler) ProposeMSP(mspConfig *mspprotos.MSPConfig) (msp.MSP,
 		if err != nil {
 			return nil, errors.WithMessage(err, "creating the MSP cache failed")
 		}
-	case int32(msp.IDEMIX):
-		// create the idemix msp instance
-		theMsp, err = msp.New(&msp.IdemixNewOpts{
-			NewBaseOpts: msp.NewBaseOpts{Version: bh.version},
-		})
-		if err != nil {
-			return nil, errors.WithMessage(err, "creating the MSP manager failed")
-		}
 	default:
 		return nil, errors.New(fmt.Sprintf("Setup error: unsupported msp type %d", mspConfig.Type))
 	}
diff --git a/msp/configbuilder.go b/msp/configbuilder.go
index 327d21eb5..836f27084 100644
--- a/msp/configbuilder.go
+++ b/msp/configbuilder.go
@@ -156,8 +156,6 @@ func GetLocalMspConfigWithType(dir string, bccspConfig *factory.FactoryOpts, ID,
 	switch mspType {
 	case ProviderTypeToString(FABRIC):
 		return GetLocalMspConfig(dir, bccspConfig, ID)
-	case ProviderTypeToString(IDEMIX):
-		return GetIdemixMspConfig(dir, ID)
 	default:
 		return nil, errors.Errorf("unknown MSP type '%s'", mspType)
 	}
@@ -194,8 +192,6 @@ func GetVerifyingMspConfig(dir, ID, mspType string) (*msp.MSPConfig, error) {
 	switch mspType {
 	case ProviderTypeToString(FABRIC):
 		return getMspConfig(dir, ID, nil)
-	case ProviderTypeToString(IDEMIX):
-		return GetIdemixMspConfig(dir, ID)
 	default:
 		return nil, errors.Errorf("unknown MSP type '%s'", mspType)
 	}
@@ -355,47 +351,3 @@ func getMspConfig(dir string, ID string, sigid *msp.SigningIdentityInfo) (*msp.M
 
 	return mspconf, nil
 }
-
-const (
-	IdemixConfigDirMsp                  = "msp"
-	IdemixConfigDirUser                 = "user"
-	IdemixConfigFileIssuerPublicKey     = "IssuerPublicKey"
-	IdemixConfigFileRevocationPublicKey = "RevocationPublicKey"
-	IdemixConfigFileSigner              = "SignerConfig"
-)
-
-// GetIdemixMspConfig returns the configuration for the Idemix MSP
-func GetIdemixMspConfig(dir string, ID string) (*msp.MSPConfig, error) {
-	ipkBytes, err := readFile(filepath.Join(dir, IdemixConfigDirMsp, IdemixConfigFileIssuerPublicKey))
-	if err != nil {
-		return nil, errors.Wrapf(err, "failed to read issuer public key file")
-	}
-
-	revocationPkBytes, err := readFile(filepath.Join(dir, IdemixConfigDirMsp, IdemixConfigFileRevocationPublicKey))
-	if err != nil {
-		return nil, errors.Wrapf(err, "failed to read revocation public key file")
-	}
-
-	idemixConfig := &msp.IdemixMSPConfig{
-		Name:         ID,
-		Ipk:          ipkBytes,
-		RevocationPk: revocationPkBytes,
-	}
-
-	signerBytes, err := readFile(filepath.Join(dir, IdemixConfigDirUser, IdemixConfigFileSigner))
-	if err == nil {
-		signerConfig := &msp.IdemixMSPSignerConfig{}
-		err = proto.Unmarshal(signerBytes, signerConfig)
-		if err != nil {
-			return nil, err
-		}
-		idemixConfig.Signer = signerConfig
-	}
-
-	confBytes, err := proto.Marshal(idemixConfig)
-	if err != nil {
-		return nil, err
-	}
-
-	return &msp.MSPConfig{Config: confBytes, Type: int32(IDEMIX)}, nil
-}
diff --git a/msp/factory.go b/msp/factory.go
index d3e9c5dae..630984fce 100644
--- a/msp/factory.go
+++ b/msp/factory.go
@@ -38,11 +38,6 @@ type BCCSPNewOpts struct {
 	NewBaseOpts
 }
 
-// IdemixNewOpts contains the options to instantiate a new Idemix-based MSP
-type IdemixNewOpts struct {
-	NewBaseOpts
-}
-
 // New create a new MSP instance depending on the passed Opts
 func New(opts NewOpts) (MSP, error) {
 	switch opts.(type) {
@@ -57,16 +52,7 @@ func New(opts NewOpts) (MSP, error) {
 		default:
 			return nil, errors.Errorf("Invalid *BCCSPNewOpts. Version not recognized [%v]", opts.GetVersion())
 		}
-	case *IdemixNewOpts:
-		switch opts.GetVersion() {
-		case MSPv1_3:
-			return newIdemixMsp(MSPv1_3)
-		case MSPv1_1:
-			return newIdemixMsp(MSPv1_1)
-		default:
-			return nil, errors.Errorf("Invalid *IdemixNewOpts. Version not recognized [%v]", opts.GetVersion())
-		}
 	default:
-		return nil, errors.Errorf("Invalid msp.NewOpts instance. It must be either *BCCSPNewOpts or *IdemixNewOpts. It was [%v]", opts)
+		return nil, errors.Errorf("Invalid msp.NewOpts instance. It must be *BCCSPNewOpts. It was [%v]", opts)
 	}
 }
diff --git a/msp/mspmgrimpl.go b/msp/mspmgrimpl.go
index c0d9ad3e9..cc2ec39ce 100644
--- a/msp/mspmgrimpl.go
+++ b/msp/mspmgrimpl.go
@@ -99,8 +99,6 @@ func (mgr *mspManagerImpl) DeserializeIdentity(serializedID []byte) (Identity, e
 	switch t := msp.(type) {
 	case *bccspmsp:
 		return t.deserializeIdentityInternal(sId.IdBytes)
-	case *idemixmsp:
-		return t.deserializeIdentityInternal(sId.IdBytes)
 	default:
 		return t.DeserializeIdentity(serializedID)
 	}
-- 
2.20.1 (Apple Git-117)

